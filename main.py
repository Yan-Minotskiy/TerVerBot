import telebot
import config
import terver
from telebot import types
import codecs

bot = telebot.TeleBot(config.TOKEN)  # —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞


@bot.message_handler(commands=['start'])
def welcome(message):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id,
                     '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!*\n'
                     '–≠—Ç–æ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ '
                     '–ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π!üé≤\n'.format(message.from_user),
                     parse_mode='Markdown')
    menu(message)


n, p, k, k2, p_a, x_a = None, None, None, None, None, None


@bot.message_handler(commands=['menu'])
def menu(message):  # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    global n, p, k, k2, p_a, x_a
    n, p, k, k2, p_a, x_a = None, None, None, None, None, None
    keyboard = types.InlineKeyboardMarkup()
    key1 = types.InlineKeyboardButton(text='–†–∞—Å—á—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ üéØ', callback_data='simple')
    keyboard.add(key1)
    key2 = types.InlineKeyboardButton(text='–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ üé∞', callback_data='combinatoric')
    keyboard.add(key2)
    key3 = types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è ‚ôªÔ∏è', callback_data='ver_count_event')
    keyboard.add(key3)
    key4 = types.InlineKeyboardButton(text='–°–ª—É—á–∞–π–Ω—ã–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã üé≤', callback_data='discret_random_value')
    keyboard.add(key4)
    key5 = types.InlineKeyboardButton(text='–¢–µ–æ—Ä–∏—è üìö', callback_data='theory')
    keyboard.add(key5)
    key6 = types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏–π üöÄ', callback_data='soon')
    keyboard.add(key6)
    bot.send_message(message.chat.id, '*–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:*\n–í–≤–µ–¥–∏—Ç–µ " / ", '
                                      '—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ü§ñ\n'
                                      '*–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã*', parse_mode='Markdown', reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def help_msg(message):  # —Å–ø—Ä–∞–≤–∫–∞
    h = codecs.open("help.txt", encoding='utf-8')
    help = h.read()
    bot.send_message(message.chat.id, help, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):  # —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    if call.data == "simple":
        simple(call.message)
    elif call.data == "combinatoric":
        combinatoric(call.message)
    elif call.data == "comb1":
        comb1(call.message)
    elif call.data == "comb2":
        comb2(call.message)
    elif call.data == "comb3":
        comb3(call.message)
    elif call.data == "ver_count_event":
        ver_count_event(call.message)
    elif call.data == "ver_count_event_step3_1":
        ver_count_event_step3_1(call.message)
    elif call.data == "ver_count_event_step3_2":
        ver_count_event_step3_2(call.message)
    elif call.data == "ver_count_event_step3_3":
        ver_count_event_step3_3(call.message)
    elif call.data == "discret_random_value":
        discret_random_value(call.message)
    elif call.data == "discret_random_value_step3_1":
        discret_random_value_step3_1(call.message)
    elif call.data == "discret_random_value_step3_2":
        discret_random_value_step3_2(call.message)
    elif call.data == "discret_random_value_step3_3":
        discret_random_value_step3_3(call.message)
    elif call.data == "discret_random_value_step3_4":
        discret_random_value_step3_4(call.message)
    elif call.data == "theory":
        theory(call.message)
    else:
        bot.send_message(call.message.chat.id, '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')


def send_error(bot_f, msg):  # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    bot_f.send_message(msg.chat.id,
                       '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚òπ '
                       '–í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n'
                       '–ü–æ–ø—Ä–æ–±—É—Ç–µ —Å–Ω–æ–≤–∞üëá')
    menu(msg)


@bot.message_handler(commands=['simple'])
def simple(message):  # –ø–æ–¥—Å—á—ë—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    img = open('simple.png', 'rb')
    bot.send_photo(message.chat.id, img, caption='–í–æ—Ç —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏üëÜ')
    bot.send_message(message.chat.id, 'üéØ–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:')
    bot.register_next_step_handler(message, simple_step1)


def simple_step1(message):
    global k
    try:
        k = int(message.text)
        if k < 0 or int(k) != k:
            raise ValueError
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):')
        bot.register_next_step_handler(message, simple_step2)
    except:
        send_error(bot, message)


def simple_step2(message):
    global n, k
    try:
        n = int(message.text)
        if n < 0 or int(n) != n:
            raise ValueError
        bot.send_message(message.chat.id, '*–†–µ–∑—É–ª—å—Ç–∞—Ç*\nP = ' + str(k / n) +
                         ' (–∏–ª–∏ P = ' + terver.reduce_fraction(k, n) + ')', parse_mode='Markdown')
        if k > n:
            bot.send_message(message.chat.id,
                             '–ù–∏ —Ç–æ —á—Ç–æ–±—ã —è –ø—Ä–∏–¥–∏—Ä–∞—é—Å—å, –Ω–æ —á–∏—Å–ª–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö '
                             '—Å–æ–±—ã—Ç–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π. '
                             '–ù–æ —è –≤—Å—ë-—Ä–∞–≤–Ω–æ –Ω–∞—à—ë–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç. '
                             '–ï–≥–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –≤–∞—à–µ–π —Å–æ–≤–µ—Å—Ç–∏.')
        menu(message)
    except:
        send_error(bot, message)


@bot.message_handler(commands=['combinatoric'])
def combinatoric(message):  # –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞
    img = open('combinatorics.jpg', 'rb')
    bot.send_photo(message.chat.id, img, caption='–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏üëÜ')
    keyboard1 = types.InlineKeyboardMarkup()
    key1_1 = types.InlineKeyboardButton(text='–ß–∏—Å–ª–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤', callback_data='comb1')
    keyboard1.add(key1_1)
    key1_2 = types.InlineKeyboardButton(text='–ß–∏—Å–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ k —ç–ª–µ–º–Ω—Ç–æ–≤', callback_data='comb2')
    keyboard1.add(key1_2)
    key1_3 = types.InlineKeyboardButton(text='–ß–∏—Å–ª–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ k —ç–ª–µ–º–Ω—Ç–æ–≤', callback_data='comb3')
    keyboard1.add(key1_3)
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å?', reply_markup=keyboard1)


@bot.message_handler(commands=['permutation'])
def comb1(message):  # —Ä–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n:')
    bot.register_next_step_handler(message, comb1_step1)


def comb1_step1(message):
    try:
        bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nPn = n! = ' +
                         str(terver.count_permutation(int(message.text))), parse_mode='Markdown')
    except:
        send_error(bot, message)


@bot.message_handler(commands=['placement'])
def comb2(message):  # —Ä–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
    bot.send_message(message.chat.id, 'n = ')
    bot.register_next_step_handler(message, comb2_step1)


def comb2_step1(message):
    global n
    try:
        n = int(message.text)
        bot.send_message(message.chat.id, 'k = ')
        bot.register_next_step_handler(message, comb2_step2)
    except:
        send_error(bot, message)


def comb2_step2(message):
    global n, k
    try:
        k = int(message.text)
        bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nAnk = n! / (n - k)! = ' +
                         str(terver.count_placement(n, k)), parse_mode='Markdown')
        menu(message)
    except:
        send_error(bot, message)


@bot.message_handler(commands=['combinations'])
def comb3(message):  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π
    bot.send_message(message.chat.id, 'n = ')
    bot.register_next_step_handler(message, comb3_step1)


def comb3_step1(message):
    global n
    try:
        n = int(message.text)
        bot.send_message(message.chat.id, 'k = ')
        bot.register_next_step_handler(message, comb3_step2)
    except:
        send_error(bot, message)


def comb3_step2(message):
    global n, k
    try:
        k = int(message.text)
        bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nCnk = n! / (n-k)!k! = ' +
                         str(terver.count_combinations(n, k)), parse_mode='Markdown')
        menu(message)
    except:
        send_error(bot, message)


def ver_count_event(message):  # —Ä–∞–∑–¥–µ–ª –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
    img = open('bernulli.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    img = open('laplas.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    img = open('puasson.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    bot.send_message(message.chat.id, '–ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–πüëÜ\n\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π: ')
    bot.register_next_step_handler(message, ver_count_event_step1)


def ver_count_event_step1(message):
    global n
    try:
        n = int(message.text)
        bot.send_message(message.chat.id,
                         '–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–∂–¥–æ–º –∏—Å–ø—Ç–∞–Ω–∏–∏'
                         ' (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ '
                         '–Ω–µ –Ω–∞—Å—Ç—É–ø–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å): ')
        bot.register_next_step_handler(message, ver_count_event_step2)
    except:
        send_error(bot, message)


def ver_count_event_step2(message):  # –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏
    global p
    try:
        p = float(message.text)
        if p < -1 or p > 1:
            raise ValueError
        if p < 0:
            bot.send_message(message.chat.id, 'p = 1 - q = ' + str(1 + p))
            p = 1 + p
        keyboard2 = types.InlineKeyboardMarkup()
        key2_1 = types.InlineKeyboardButton(text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è',
                                            callback_data='ver_count_event_step3_1')
        keyboard2.add(key2_1)
        key2_2 = types.InlineKeyboardButton(text='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π',
                                            callback_data='ver_count_event_step3_2')
        keyboard2.add(key2_2)
        key2_3 = types.InlineKeyboardButton(text='–ù–∞–∏–≤–µ—Ä–æ—è—Ç–Ω–µ–π—à–µ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π',
                                            callback_data='ver_count_event_step3_3')
        keyboard2.add(key2_3)
        bot.send_message(message.chat.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è k'
                                          ', –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç k1 –¥–æ k2 '
                                          '–∏–ª–∏ –Ω–∞–∏–≤–µ—Ä–æ—è—Ç–Ω–µ–π—à–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π?', reply_markup=keyboard2)
    except:
        send_error(bot, message)


def ver_count_event_step3_1(message):
    bot.send_message(message.chat.id, 'k = ')
    bot.register_next_step_handler(message, ver_count_event_step4_1)


def ver_count_event_step4_1(message):
    global n, p, k
    try:
        k = int(message.text)
        if k < 0 or k > n:
            raise ValueError
        bot.send_message(message.chat.id, terver.ver_count_event_solve(n, p, k), parse_mode='Markdown')
        menu(message)
    except:
        send_error(bot, message)


def ver_count_event_step3_2(message):
    bot.send_message(message.chat.id, 'k1 = ')
    bot.register_next_step_handler(message, ver_count_event_step4_2)


def ver_count_event_step4_2(message):
    global k, n
    try:
        k = int(message.text)
        if k < 0 or k > n:
            raise ValueError
        bot.send_message(message.chat.id, 'k2 = ')
        bot.register_next_step_handler(message, ver_count_event_step5_2)
    except:
        send_error(bot, message)


def ver_count_event_step5_2(message):
    global n, p, k, k2
    try:
        k2 = int(message.text)
        if k2 < 0 or k2 > n:
            raise ValueError
        if k2 < k:
            bot.send_message(message.chat.id, '–ó–Ω–∞—á–µ–Ω–∏–µ k2 –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º k1.')
            menu(message)
        else:
            bot.s4end_message(message.chat.id, terver.ver_count_event_solve(n, p, k, k2), parse_mode='Markdown')
            menu(message)
    except:
        send_error(bot, message)


def ver_count_event_step3_3(message):
    global n, p
    q = 1 - p
    bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nq = 1 - p = ' + str(q) +
                     '\n–ù–∞–π–¥—ë–º –Ω–∞–∏–≤–µ—Ä–æ—è—Ç–Ω–µ–π—à–µ–µ —á–∏—Å–ª–æ —É—Å–ø–µ—Ö–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞:\nnp-q <= k <= np+p\n'
                     + str(n * p - q) + ' <= k <= ' + str(n * p + p) + '\n*–û—Ç–≤–µ—Ç:' +
                     terver.most_probable_count(n, p) + '*', parse_mode='Markdown')
    menu(message)


@bot.message_handler(commands=['discret_random_value', 'math_expectation', 'dispersion', 'mean_square_deviation'])
def discret_random_value(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
    bot.register_next_step_handler(message, discret_random_value_step1)


def discret_random_value_step1(message):
    global x_a
    try:
        x_a = list(map(float, message.text.split()))
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è p –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
        bot.register_next_step_handler(message, discret_random_value_step2)
    except:
        send_error(bot, message)


def discret_random_value_step2(message):
    global x_a, p_a
    try:
        p_a = list(map(float, message.text.split()))
        if len(p_a) != len(x_a):
            bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π p –∏ x –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. ')
            raise ValueError
        elif sum(p_a) != 1:
            bot.send_message(message.chat.id, '–°—É–º–º–∞ –≤—Å–µ—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.')
            raise ValueError
        keyboard4 = types.InlineKeyboardMarkup()
        key4_1 = types.InlineKeyboardButton(text='–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ',
                                            callback_data='discret_random_value_step3_1')
        keyboard4.add(key4_1)
        key4_2 = types.InlineKeyboardButton(text='–î–∏—Å–ø–µ—Ä—Å–∏—é',
                                            callback_data='discret_random_value_step3_2')
        keyboard4.add(key4_2)
        key4_3 = types.InlineKeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
                                            callback_data='discret_random_value_step3_3')
        keyboard4.add(key4_3)
        key4_4 = types.InlineKeyboardButton(text='–í—Å—ë –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µüëÜ',
                                            callback_data='discret_random_value_step3_4')
        keyboard4.add(key4_4)
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?üîé', reply_markup=keyboard4)
    except:
        send_error(bot, message)


def discret_random_value_step3_1(message):
    global x_a, p_a
    bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nM(X) = Œ£xipi = ' + str(terver.math_expectation(p_a, x_a)))
    menu(message)


def discret_random_value_step3_2(message):
    global x_a, p_a
    x2 = list(map(lambda x: x * x, x_a))
    m = terver.math_expectation(p_a, x_a)
    d = terver.dispersion(p_a, x_a)
    m2 = terver.math_expectation(p_a, x2)
    bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nM(X) = Œ£xipi = ' + str(m) + '\nM(x)^2 = ‚àë(xi)^2‚ãÖpi' + str(m * m) +
                     '\nM(x^2) = ' + str(m2) + '\nD(X) = M(X^2)‚àí[M(X)]^2 = ' + str(d) + '\n*–û—Ç–≤–µ—Ç: ' + str(d) + '.*',
                     parse_mode='Markdown')
    menu(message)


def discret_random_value_step3_3(message):
    global x_a, p_a
    x2 = list(map(lambda x: x * x, x_a))
    m = terver.math_expectation(p_a, x_a)
    d = terver.dispersion(p_a, x_a)
    q = terver.mean_square_deviation(p_a, x_a)
    m2 = terver.math_expectation(p_a, x2)
    bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nM(X) = Œ£xipi = ' + str(m) + '\nM(x)^2 = ‚àë(xi)^2‚ãÖpi = ' +
                     str(m * m) + '\nM(x^2) = ' + str(m2) + '\nD(X) = M(X^2)‚àí[M(X)]^2 = ' + str(d) +
                     '\nœÉ(X) = ‚àöD(X) = ' + str(q) + '\n*–û—Ç–≤–µ—Ç: ' + str(q) + '.*', parse_mode='Markdown')
    menu(message)


def discret_random_value_step3_4(message):
    global x_a, p_a
    x2 = list(map(lambda x: x * x, x_a))
    m = terver.math_expectation(p_a, x_a)
    d = terver.dispersion(p_a, x_a)
    q = terver.mean_square_deviation(p_a, x_a)
    m2 = terver.math_expectation(p_a, x2)
    bot.send_message(message.chat.id, '*‚úÖ–†–µ—à–µ–Ω–∏–µ*\nM(X) = Œ£xipi = *' + str(m) + '*\nM(x)^2 = ‚àë(xi)^2‚ãÖpi = ' +
                     str(m * m) + '\nM(x^2) = ' + str(m2) + '\nD(X) = M(X^2)‚àí[M(X)]^2 = *' + str(d) +
                     '*\nœÉ(X) = ‚àöD(X) = *' + str(q) + '*', parse_mode='Markdown')
    menu(message)


@bot.message_handler(commands=['theory'])
def theory(message):
    t = codecs.open("theory.txt", encoding='utf-8').read().split('%')
    bot.send_message(message.chat.id, t[0], parse_mode='Markdown')
    img = open('simple.png', 'rb')
    bot.send_photo(message.chat.id, img, caption='–í–æ—Ç —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏üëÜ')
    bot.send_message(message.chat.id, t[1], parse_mode='Markdown')
    img = open('combinatorics.jpg', 'rb')
    bot.send_photo(message.chat.id, img, caption='–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏üëÜ')
    bot.send_message(message.chat.id, t[2], parse_mode='Markdown')
    bot.send_message(message.chat.id, t[3], parse_mode='Markdown')
    img = open('bernulli.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    img = open('laplas.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    img = open('puasson.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    bot.send_message(message.chat.id, t[4], parse_mode='Markdown')
    menu(message)


@bot.message_handler(commands=['feedback'])
def feedback(message):
    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüëá')
    bot.register_next_step_handler(message, feedback_step1)


def feedback_step1(message):
    if message.from_user.username not in config.BLOCK_USER_LIST:
        bot.send_message(config.FEEDBACK_CHAT_ID,
                         '–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0.username}:\n\n{1}'.format(message.from_user,
                                                                              message.text))
        bot.send_message(message.chat.id, '–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å‚ù§')
        menu(message)
    else:
        bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–ª –≤–∞—à—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å‚ùå')
        menu(message)


@bot.message_handler(commands=['kill'])
def kill(message):
    if message.from_user.username in config.ADMIN_LIST:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ, —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:')
        bot.register_next_step_handler(message, kill_step1)
    else:
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!')
        menu(message)


def kill_step1(message):
    config.BLOCK_USER_LIST.append(message.text)
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @' + message.text
                     + ' —Ç–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.')


@bot.message_handler(commands=['about'])
def about(message):
    bot.send_message(message.chat.id, '*–¢–µ—Ä–í–µ—Ä–ë–æ—Ç*\n–í–µ—Ä—Å–∏—è: ' + config.VERSION + '\n–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: '
                     + config.RELEASE_DATE + '\n–†–µ–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: @yan_minotskiy\n–ö–æ–¥ –∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: '
                                             'https://github.com/Yan-Minotskiy/TerVerBot')


@bot.message_handler(content_types=['text', 'document', 'audio', 'video',
                                    "sticker", "pinned_message", "photo", 'voice'])
def answer(message):
    sti1 = open('sti1.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti1)
    bot.send_message(message.chat.id, '–Ø –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –ø–æ–Ω–∏–º–∞—Ç—å —ç—Ç–æ')
    menu(message)


bot.polling(none_stop=True)
